#!/usr/bin/env python2
# coding=utf-8

# Copyright:  2014 Daniel Edwards
# Licence:    EUPL Version 1.1 or - as soon they will be approved by the
#             European Commission - subsequent versions of the EUPL.
#             You may not use this work except in compliance with the
#             Licence.
#             You may obtain a copy of the Licence at:
#                 https://joinup.ec.europa.eu/software/page/eupl
#             Unless required by applicable law or agreed to in writing,
#             software distributed under the Licence is distributed on an
#             "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
#             either express or implied.
#             See the licence for the specific language governing
#             permissions and limitations under the Licence.

from __future__ import print_function

import os, time, threading, subprocess

def reauth_krb_renew( cmd_kinit, krb_principal, **kwargs ):
    cmd = [ cmd_kinit, '--renewable', '--renew' ]
    if krb_principal is not None:
        cmd.append( krb_principal )

    if kwargs["verbose"]:
        print( "calling: " + ' '.join( cmd ) )

    subprocess.check_call( cmd )

def reauth_krb_password( cmd_kinit, krb_principal, krb_password, **kwargs ):
    cmd = [ cmd_kinit, '--password-file=STDIN' ]
    if krb_principal is not None:
        cmd.append( krb_principal )

    if kwargs["verbose"]:
        print( "calling: " + ' '.join( cmd ) )

    p = subprocess.Popen( cmd, stdin = subprocess.PIPE )
    p.communicate( krb_password.encode( ) )

def reauth_krb( krb_renew = None, **kwargs ):
    if krb_renew: reauth_krb_renew( **kwargs )
    else:         reauth_krb_password( **kwargs )


def reauth_afs( cmd_aklog, afs_cell, krb_realm, **kwargs ):
    cmd = [ cmd_aklog ]
    if afs_cell is not None:
        cmd.append( '-cell' )
        cmd.append( afs_cell )
        if krb_realm is not None:
            cmd.append( '-k' )
            cmd.append( krb_realm )

    if kwargs["verbose"]:
        print( "calling: " + ' '.join( cmd ) )

    subprocess.check_call( cmd )


def reauth( do_krb, do_afs, **kwargs ):
    if do_krb: reauth_krb( **kwargs )
    if do_afs: reauth_afs( **kwargs )


def run_loop( period, **kwargs ):
    while True:
        # reauthenticate
        reauth( **kwargs )

        # sleep for #period seconds
        time.sleep( period )


def run( wait_for_pid, **kwargs ):
    if wait_for_pid is None:
        # if #wait_for_pid is not set, we run the loop in the main thread
        run_loop( **kwargs )
    else:
        # Start run_loop in a seperate thread.

        t = threading.Thread(
            name = "run_loop", target = run_loop, kwargs = kwargs
        )
        # The thread should be a daemon thread, because we want the process
        # to exit after we found the wait_for_pid process to be dead.
        # A process exits after it's last non-daemon thread exited.
        t.daemon = True 
        t.start( )

        # Wait for the pid to exit. Unfortunately this needs to be a "busy
        # wait" ... This also means that, if the pid is reused in the time
        # we sleep, we won't notice the other process to be dead.

        proc_path = os.path.join( '/proc', str( wait_for_pid ) )
        while   t.is_alive( ) and os.path.exists( proc_path ):
            # wait a few seconds till next check
            time.sleep( 1 )

    
import sys, argparse, getpass, signal, resource

def handle_sigint( signum, frame ):
    sys.exit(1)

def main( args ):
    parser = argparse.ArgumentParser( )
    parser.add_argument(
        "--no-krb",
        action = "store_false",
        help = "Don't reauthenticate Kerberos ticket.",
        dest = "do_krb",
    )
    parser.add_argument(
        "--no-afs",
        action = "store_false",
        help = "Don't reauthenticate AFS token",
        dest = "do_afs",
    )
    parser.add_argument(
        "--no-krb-renew",
        action = "store_false",
        help = (  "Don't renew Kerberos ticket, get initial ticket. "
                  "This will ask for the password on stdin." ),
        dest = "krb_renew"
    )
    parser.add_argument(
        "--krb-principal",
        default = None,
        help = (  "Specify the Kerberos principal to get tickets for. "
                  "If omitted the kinit program will choose the principal "
                  "for you (this does almost always the right thing)." ),
    )
    parser.add_argument(
        "--krb-realm",
        default = None,
        help = (  "Specifiy the Kerberos realm of the ticket to be used to "
                  "get the AFS token. If omitted the aklog program will "
                  "choose the realm for you (this does almost always the "
                  "right thing)." ),
    )
    parser.add_argument(
        "--afs-cell",
        default = None,
        help = (  "Specify the AFS cell to get tokens for. "
                  "If omitted the aklog program will choose the cell for "
                  "you (this does almost always the right thing)." ),
    )
    parser.add_argument(
        "--period",
        type = int,
        default = 3600 * 12,
        help = "Period of time between reauthentications in seconds.",
    )
    parser.add_argument(
        "--daemonize",
        action = "store_true",
        help = "Fork and run in the background."
    )
    parser.add_argument(
        "--wait-for-pid",
        type = int,
        default = None,
        help = (  "The reauthentication process will wait for the process "
                  "with this pid to exit and exit after it." ),
    )
    parser.add_argument(
        "--verbose",
        action = "store_true",
        help = (  "Print some debugging output." ),
    )
    cmd_args = parser.parse_args( args[1:] )

    kwargs = {
        "cmd_kinit": '/usr/bin/kinit',
        "cmd_aklog": '/usr/bin/aklog',
    }
    kwargs.update( vars( cmd_args ) )

    # if krb_renew is False we need to get the password from the user
    if not cmd_args.krb_renew:
        try:
            kwargs["krb_password"] = getpass.getpass( "Password: " )
        except KeyboardInterrupt:
            sys.exit( 1 )
    else:
        kwargs["krb_password"] = None

    # if daemonize is set we fork to background
    if cmd_args.daemonize:
        # creating a process hierachy like this
        # ┏╸main
        # ┃ * process started by the user of the scirpt
        # ┃ * terminates immediately
        # ┗━┳╸leader
        #   ┃ * creates new process group
        #   ┃ * parent process for the actual daemon process
        #   ┃ * terminates immediately so children become orphaned and are
        #   ┃   adopted by the init process - this prevents the daemon
        #   ┃   from becoming a zombie
        #   ┗━━╸daemon
        #       * the daemon process
        #       * reauthenticates

        try:
            pid = os.fork( )
        except OSError as ex:
            raise Exception(
                "fork failed: %s [%d]" % ( ex.strerror, ex.errno )
            )

        ## process: main

        if pid == 0:
            ## process: leader

            # leader gets it's own process group
            os.setsid( )
            
            try:
                pid = os.fork( )
            except OSError as ex:
                raise Exception(
                    "fork failed: %s [%d]" % ( ex.strerror, ex.errrno )
                )

            if pid == 0:
                ## process: daemon

                # We chdir to the root-direcotry so we don't keep random
                # directory fds open, which might block other programs.
                os.chdir( '/' )

                # Close all file descriptors. 
                maxfd = resource.getrlimit( resource.RLIMIT_NOFILE )[1]
                if maxfd == resource.RLIM_INFINITY: maxfd = 1024
                for fd in range( 0, maxfd ):
                    try:            os.close( fd )
                    except OSError: pass

                # Open /dev/null and redirect stdout and stderr
                # This opens the lowest free file descriptor, which is 0
                # (after closing all other fds). We want open fds for
                # std{in,out,err} because most output functions might
                # behave strange (at least) when these are not available.
                

                os.open( os.devnull, os.O_RDWR )
                os.dup2( 0, 1 )
                os.dup2( 0, 2 )
            else:
                ## process: leader
                os._exit( 0 )

        else:
            ## process: main
            os._exit( 0 )
    else:
        # daemonize is not set

        # we want to "gracefully exit" on CTRL-C
        signal.signal( signal.SIGINT, handle_sigint )

    ## process: daemon (if daemonize is set)

    run( **kwargs )


main( sys.argv )

